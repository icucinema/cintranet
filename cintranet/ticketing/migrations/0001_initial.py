# Generated by Django 2.1.4 on 2019-01-03 15:23

from django.db import migrations, models
import django.db.models.deletion
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseTicketInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('online_description', models.TextField(blank=True, default='')),
                ('sell_online', models.BooleanField(default=False)),
                ('sell_on_the_door', models.BooleanField(default=True)),
                ('general_availability', models.BooleanField(default=False)),
                ('sale_price', models.DecimalField(decimal_places=2, help_text='This is the price at which tickets are sold - the price punters will pay', max_digits=5)),
                ('box_office_return_price', models.DecimalField(decimal_places=2, help_text='This is the inc-VAT (gross) price reported on the BOR for *each* film', max_digits=5)),
                ('name', models.CharField(max_length=128)),
                ('print_template_extension', models.CharField(blank=True, default='', max_length=64)),
                ('is_public', models.BooleanField(default=False, help_text='Display on website?')),
                ('count_towards_capacity', models.PositiveSmallIntegerField(default=1, help_text='How many people should this count towards capacity?')),
            ],
            options={
                'ordering': ['sale_price'],
            },
        ),
        migrations.CreateModel(
            name='BoxOfficeReturn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_data', models.TextField()),
                ('pdf_file', models.FileField(upload_to='box_office_returns')),
                ('start_time', models.DateField()),
                ('additional_bit', models.CharField(blank=True, default='', max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Distributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('via_troy', models.BooleanField(default=False)),
                ('royalties_percent', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('royalties_minimum', models.PositiveSmallIntegerField(blank=True, help_text='Minimum Guarantee (net/no VAT)', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Entitlement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EntitlementDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('remaining_uses', models.PositiveIntegerField(blank=True, null=True)),
                ('discount', models.PositiveSmallIntegerField(default=0)),
                ('entitlement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entitlement_details', to='ticketing.Entitlement')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=300)),
                ('start_time', models.DateTimeField()),
                ('additional_audience', models.PositiveSmallIntegerField(default=0, help_text='Number to add to audience figures in stats (e.g. for additionally sold tickets not recorded by PoS)')),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.PositiveIntegerField(blank=True, null=True)),
                ('imdb_id', models.CharField(blank=True, default='', max_length=20)),
                ('rotten_tomatoes_id', models.CharField(blank=True, default='', max_length=20)),
                ('youtube_id', models.CharField(blank=True, default='', max_length=20)),
                ('name', models.CharField(default='', max_length=256)),
                ('sorting_name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, default='')),
                ('short_description', models.TextField(blank=True, default='')),
                ('certificate', models.CharField(default='', max_length=12)),
                ('length', models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ('poster_url', models.URLField(blank=True, default='')),
                ('hero_image_url', models.URLField(blank=True, default='')),
                ('is_public', models.BooleanField(default=True)),
                ('distributor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='films', to='ticketing.Distributor')),
            ],
            options={
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='Punter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('punter_type', model_utils.fields.StatusField(choices=[('full', 'full'), ('associate', 'associate'), ('public', 'public')], db_index=True, default='full', max_length=100, no_check_for_status=True)),
                ('name', models.CharField(blank=True, default='', max_length=256)),
                ('cid', models.CharField(blank=True, default='', max_length=64)),
                ('login', models.CharField(blank=True, default='', max_length=64)),
                ('swipecard', models.CharField(blank=True, default='', max_length=64)),
                ('email', models.EmailField(blank=True, default='', max_length=256)),
                ('comment', models.TextField(blank=True, default='')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PunterIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('swipe', 'swipe'), ('rfid', 'rfid')], default='swipe', max_length=120)),
                ('value', models.CharField(max_length=256)),
                ('punter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='ticketing.Punter')),
            ],
        ),
        migrations.CreateModel(
            name='Showing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('is_public', models.BooleanField(default=False)),
                ('banner_text', models.CharField(blank=True, default='', max_length=280)),
                ('whats_on_id', models.PositiveIntegerField(default=None, null=True)),
                ('primary_event', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_showing', to='ticketing.Event')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='ShowingsWeek',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('additional_bit', models.CharField(blank=True, default='', max_length=120)),
                ('royalties_percent', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('royalties_minimum', models.PositiveSmallIntegerField(blank=True, help_text='Minimum Guarantee (net/no VAT)', null=True)),
                ('royalties_troytastic', models.BooleanField(default=False, help_text='Use the magical Troy calculation?')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showing_weeks', to='ticketing.Film')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(blank=True, default='', max_length=32)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', model_utils.fields.StatusField(choices=[('pending_collection', 'pending_collection'), ('live', 'live'), ('void', 'void'), ('refunded', 'refunded')], db_index=True, default='pending_collection', max_length=100, no_check_for_status=True)),
                ('entitlement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='ticketing.Entitlement')),
                ('punter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='ticketing.Punter')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='TicketTemplate',
            fields=[
                ('baseticketinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketing.BaseTicketInfo')),
                ('event_type', models.ManyToManyField(related_name='ticket_templates', to='ticketing.EventType')),
            ],
            bases=('ticketing.baseticketinfo',),
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('baseticketinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ticketing.BaseTicketInfo')),
            ],
            bases=('ticketing.baseticketinfo',),
        ),
        migrations.AddField(
            model_name='showing',
            name='week',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showings', to='ticketing.ShowingsWeek'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_types',
            field=models.ManyToManyField(null=True, related_name='event_types', to='ticketing.EventType'),
        ),
        migrations.AddField(
            model_name='event',
            name='showings',
            field=models.ManyToManyField(related_name='events', to='ticketing.Showing'),
        ),
        migrations.AddField(
            model_name='entitlementdetail',
            name='punter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entitlement_details', to='ticketing.Punter'),
        ),
        migrations.AddField(
            model_name='entitlement',
            name='entitled_to',
            field=models.ManyToManyField(related_name='entitlements', to='ticketing.BaseTicketInfo'),
        ),
        migrations.AddField(
            model_name='entitlement',
            name='punters',
            field=models.ManyToManyField(related_name='entitlements', through='ticketing.EntitlementDetail', to='ticketing.Punter'),
        ),
        migrations.AddField(
            model_name='boxofficereturn',
            name='film',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='box_office_returns', to='ticketing.Film'),
        ),
        migrations.AddField(
            model_name='tickettype',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ticketing.Event'),
        ),
        migrations.AddField(
            model_name='tickettype',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ticketing.TicketTemplate'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='ticket_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='ticketing.TicketType'),
        ),
        migrations.AlterUniqueTogether(
            name='punteridentifier',
            unique_together={('type', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='entitlementdetail',
            unique_together={('punter', 'entitlement')},
        ),
    ]
